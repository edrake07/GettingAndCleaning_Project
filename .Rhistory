}
x <- c(1,2,3,4)
a <- makeVector(c(5,1,3))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
a <- makeVector(c(5,1,3))
a$get()
a$set(c(7,4,1,2))
a$get()
cachemean <- function(x,...) {
m <- x$getmean()
if(!is.null(m)) {
message("gettin cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
a$setmean(10)
cachemean(a)
?solve
matrix <- (3,2,1:6)
newm <- matrix(1:6,3,2)
newm
newm <- matrix(1:4,2,2)
solve(newm)
newm
dim(newm)
attr(newm)
?attr
attributes(newm)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- funtion() x
setinv <- function(inverse) inv <<- inverse
getinv <- function inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
makeCacheMatrix <- function(x = matrix(),...) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
x <- matrix(1:4,2,2)
a <- makeCacheMatrix(x)
a$get()
a$set(matrix(1:6,3,3))
a$get()
a$setinv(matrix(6:12,3,3))
a$setinv(matrix(6:11,3,3))
a$getinv()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSovle <- function(x, ...) {
inv <- x$getinv()
if(!isnull(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
inv
}
makeCacheMatrix(matrix(1:4,2,2))
a <- makeCacheMatrix(matrix(1:4,2,2))
cacheSovle(a)
cacheSovle <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
inv
}
cacheSolve(a)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
inv
}
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- solve(x)
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
a <- makeCacheMartix(matrix(1:4,2,2))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- solve(x)
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
a <- makeCacheMatrix(matrix(1:4,2,2))
a$getinv
a$set(matrix(1:9,3,3))
a$set(matrix1:4,2,2)
a$set(matrix(1:4,2,2))
a$getinv()
makeCacheMatrix <- function(x = matrix()) {
inv <- solve(x)
set <- function(y) {
x <<- y
inv <<- solve(x)
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
a <- makeCacheMatrix(matrix(1:4,2,2))
a$getinv()
get()
##function makeCacheMatrix has one argument which must be a square matrix
##4 functions are created: get(), set(), setinv(), getinv()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {    ##creates set function which input new matrix into makeCacheMatrix
x <<- y         ##overwrites original matrix with new input
inv <<- NULL    ##clears cached inverse
}
get <- function() x     ##creates get function which will print matrix
setinv <- function(inverse) inv <<- inverse    ##setinv function will manually cache
getinv <- function() inv    ##getinv will print inverse
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##cacheSolve will first try to pull the cached inverse from makeCacheMatrix
##if no inverse is cached, the inverse will be calculated
##message will print if cached inverse if used
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
inv
}
a <- makeCacheMatrix(matrix(1:100,10,10))
cacheSolve(a)
a <- matrix(1:100,10,10)
inverse(a)
solve(a)
matrix(5:105,10,10)
a <- matrix(5:104,10,10)
sovle(a)
solve(a)
a <- matrix(1:4,2,2)
solve(A)
sove(a)
solve(a)
a <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(a)
cachesolve(a)
cacheSolve(a)
inv
a$setinv(matrix(c(3,4,5,6),2,2))
cacheSolve(a)
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library("dplyr")
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
craqn
cran
group_by?
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean_size = mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, top_counts = count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
submit()
library(dplyr)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
separate()
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, passed = "passed")
passed <- mutate(passed, status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?select
submit()
submit()
setwd("~/Documents/DataScience/3_GettingandCleaningData/project")
library(dplyr)
library(tidyr)
features <- read.table("UCI HAR Dataset/features.txt", sep = " ", col.names = c("feature_cnt", "feature_name"), quote = "")
train_raw <- read.table("UCI HAR Dataset/train/X_train.txt", dec = ".", comment.char = "", colClasses = "numeric", col.names = features$feature_name) %>% tbl_df
test_raw <- read.table("UCI HAR Dataset/test/X_test.txt", dec = ".", comment.char = "", colClasses = "numeric", col.names = features$feature_name) %>% tbl_df
train_labels <- read.table("UCI HAR Dataset/train/Y_train.txt",col.names = "label")
test_labels <- read.table("UCI HAR Dataset/test/Y_test.txt",col.names = "label")
test_subject <- read.table("UCI HAR Dataset/test/subject_test.txt",col.names = "subject")
train_subject <- read.table("UCI HAR Dataset/train/subject_train.txt",col.names = "subject")
test <- test_raw %>% select(contains("std"), contains("mean"))
train <- train_raw %>% select(contains("std"), contains("mean"))
test <- cbind(test_subject,test_labels,test)
train <- cbind(train_subject,train_labels,train)
dat <- bind_rows(train, test)
dat <- dat %>% gather(key,Measurement,-subject, -label, -(fBodyAccMag.mean..:angle.Z.gravityMean.),-(tBodyAccMag.mean..:tBodyGyroJerkMag.mean..),-(fBodyAccMag.std..:fBodyBodyGyroJerkMag.std..), -(tBodyAccMag.std..:tBodyGyroJerkMag.std..))
#%>% separate(key, c("Measure_name","Measure_type","Measure_axis"), remove = TRUE)
dim(dat)
View(unique(select(dat, key)))
separate(key, c("Measure_name","Measure_type","Measure_axis"), remove = TRUE)
dat <- dat %>% separate(key, c("Measure_name","Measure_type","Measure_axis"), remove = TRUE)
View(dat)
test <- test %>% mutate(dataset = "test")
train <- train %>% mutate(dataset = "train")
?rm
rm(dat)
dat <- bind_rows(train, test)
View(dat)
?grep
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt", sep = " ", col.names = c("activity_cnt", "activity_name"), quote = "")
activity_labels
View(dat)
activity_labels$activity_cnt
dat2 <- for (i in activity_labels$activity_cnt) {
gsub(select(dat, label),activity_labels[i,2])
}
dat2 <- for (i in activity_labels$activity_cnt) {
gsub(activity_labels[i,1],activity_labels[i,2],select(dat, label))
}
View(dat2)
dat2 <- for (i in activity_labels[,1]) {
gsub(activity_labels[i,1],activity_labels[i,2],select(dat, label))
}
View(dat2)
View(dat)
dat2 <- gsub(activity_labels[1,1],activity_labels[1,2],select(dat, label))
View(dat2)
dat2 <- gsub("1","WALKING",select(dat, label))
View(dat2)
?regexp
dat2 <- dat %>% mutate(if (label ==1) {activity = "WALKING"}
if( label ==2) {activity = "WAKING_UPSTAIRS"}
if( label ==3) {activity = "WAKING_DOWNSTAIRS"}
if( label ==4) {activity = "SITTING"}
if( label ==5) {activity = "STANDING"}
if( label ==6) {activity = "LAYING"}
)
dat2 <- dat %>% mutate(if (label ==1) {activity = "WALKING"},
if (label ==2) {activity = "WAKING_UPSTAIRS"},
if (label ==3) {activity = "WAKING_DOWNSTAIRS"},
if (label ==4) {activity = "SITTING"},
if (label ==5) {activity = "STANDING"},
if (label ==6) {activity = "LAYING"}
)
dat2 <- dat %>% mutate(if (label ==1) {activity = "WALKING"},
if (label ==2) {activity = "WAKING_UPSTAIRS"},
if (label ==3) {activity = "WAKING_DOWNSTAIRS"},
if (label ==4) {activity = "SITTING"},
if (label ==5) {activity = "STANDING"},
if (label ==6) {activity = "LAYING"})
dat2 <- dat %>% mutate(if (label ==1) {activity = "WALKING"})
dat2 <- dat %>% mutate(activity = "WALKING")
View(dat2)
dat2 <- dat %>% mutate(activity = c("WALKING", label)
dat2 <- dat %>% mutate(activity = label)
View(dat2)
class(label)
class(dat$label)
dat2 <- dat %>% mutate(if (dat$label ==1) {activity = "WALKING"},
if (dat$label ==2) {activity = "WAKING_UPSTAIRS"},
if (dat$label ==3) {activity = "WAKING_DOWNSTAIRS"},
if (dat$label ==4) {activity = "SITTING"},
if (dat$label ==5) {activity = "STANDING"},
if (dat$label ==6) {activity = "LAYING"})
dat2 <- dat %>% mutate(if dat$label ==1 {activity = "WALKING"})
dat2 <- dat %>% mutate(if label ==1 {activity = "WALKING"})
dat2 <- dat %>% mutate(activity = ifelse(label==1,"WALKING",""))
View(dat2)
dat2 <- dat %>% mutate(activity = if label==1 {"WALKING"})
dat2 <- dat %>% mutate(activity = if (label==1) {"WALKING"})
dat2 <- dat %>% mutate(activity = ifelse(label==1,"WALKING",ifelse(label==2,"WALKING_UPSTAIRS","")))
dat2 <- dat %>% mutate(activity = ifelse(label==1,"WALKING",ifelse(label==2,"WALKING_UPSTAIRS",)))
dat2 <- dat %>% mutate(activity = ifelse(label==1,"WALKING",ifelse(label==2,"WALKING_UPSTAIRS",ifelse(label==3,"WALKING_DOWNSTAIRS",ifelse(label==4,"SITTING",ifelse(label==5,"STANDING","LAYING")))))
dat2 <- dat %>% mutate(activity = ifelse(label==1,"WALKING",ifelse(label==2,"WALKING_UPSTAIRS",ifelse(label==3,"WALKING_DOWNSTAIRS",ifelse(label==4,"SITTING",""))))
dat2 <- dat %>% mutate(activity = ifelse(label==1,"WALKING",ifelse(label==2,"WALKING_UPSTAIRS",ifelse(label==3,"WALKING_DOWNSTAIRS",ifelse(label==4,"SITTING",ifelse(label==5,"STANDING","LAYING"))))))
View(unique(select(dat2,label,activity_labels)))
View(unique(select(dat2,label,activity)))
dat <- dat %>% mutate(activity = ifelse(label==1,"WALKING",
ifelse(label==2,"WALKING_UPSTAIRS",
ifelse(label==3,"WALKING_DOWNSTAIRS",
ifelse(label==4,"SITTING",
ifelse(label==5,"STANDING","LAYING"))))))
View(dat)
dim(dat)
dat_grouped <- %>% dat group_by(subject, activity )
dat_grouped <- dat %>% group_by(subject, activity )
test_table <- dat_grouped %>% summarize(tBodyAcc.std...X,mean)
test_table <- dat_grouped %>% summarize(new1 = mean(tBodyAcc.std...X))
test_table
?summarise_each
test_table <- dat_grouped %>% summarize_each(funs(mean))
warnings()
View(test_table)
dim(test_table)
summary_dat <- dat_grouped %>% select(-label,-dataset)
test_table <- summary_dat %>% summarize_each(funs(mean))
source(project.R)
source("project.R")
View(data_all)
data_all <- data_all %>% select(dataset, subject, activity, tBodyAcc.std...X:angleZ.gravityMean.)
data_all <- data_all %>% select(dataset, subject, activity, tBodyAcc.std...X:angle.Z.gravityMean.)
View(summary_means)
source("project.R")
View(summary_means)
View(data_all)
grep("...",names(data_all))
?grep
names <- names(data_all)
str(names)
names_new <- gsub("...","-",names)
View(names_new)
names_new
names_new <- gsub("...","-",names, fixed = TRUE)
names_new
names_new <- gsub("..","",names_new, fixed = TRUE)
names_new
names_new <- gsub("$.","",names_new, fixed = TRUE)
names_new
names(data_all) <- names_new
View(data_all)
source("project.R")
source("project.R")
source("project.R")
dim(data_all)
source("TidyProj.R")
?write.csv
write.csv(data_all, file = "data_all.csv", dec = ".")
write.csv(data_all, file = "data_all.csv")
write.csv(data_all, file = "data_all.csv", row.names = FALSE)
write.csv(summary_means, file = "summary_means.csv", row.names = FALSE)
